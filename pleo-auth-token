#!/usr/bin/env bash

urlencode() {
    # urlencode <string>
    old_lc_collate=$LC_COLLATE
    LC_COLLATE=C

    local length="${#1}"
    for (( i = 0; i < length; i++ )); do
        local c="${1:i:1}"
        case $c in
            [a-zA-Z0-9.~_-]) printf "%s" "$c" ;;
            *) printf '%%%02X' "'$c" ;;
        esac
    done

    LC_COLLATE=$old_lc_collate
}

# Defaults
scope="resource:basic"
oauth_id=$(env LC_CTYPE=C tr -dc a-zA-Z0-9 < /dev/random | head -c 16)
state="{\"id\": \"$oauth_id\"}"
email="user@pleo.io"
password="Password"
environment="staging"
two_factor=false

usage="$(basename "$0") [-h] [-2] [-u username] [-p password] [-e environment] -- program to get an access token from Kerberos

where:
    -h  show this help text
    -u  set the user to log in with (default: user@pleo.io)
    -p  set the password of the user (default: Password)
    -e  set which environment to get a token from (default: staging)
    -2  get a 2FA based token instead of a regular token"

while getopts ':h2u:p:e:' option; do
  case "$option" in
    h)
            echo "$usage"
            exit
            ;;
    u)
            email=$OPTARG
            ;;
    p)
            password=$OPTARG
            ;;
    e)
            environment=$OPTARG
            ;;
    2)
            two_factor=true
            ;;
    :)
            printf "missing argument for -%s\\n\\n" "$OPTARG" >&2
            echo "$usage" >&2
            exit 1
            ;;
   \?)
           printf "illegal option: -%s\\n\\n" "$OPTARG" >&2
           echo "$usage" >&2
           exit 1
           ;;
  esac
done
shift $((OPTIND - 1))

case "$environment" in
        staging)
                base_url="https://auth.staging.pleo.io"
                client_id="4ecc65b1-010f-4a34-9b23-94db00bc99ea"
                redirect_uri="https://app.staging.pleo.io/login"
                ;;
        production)
                base_url="https://auth.pleo.io"
                client_id="b3747f52-1483-434b-a635-07db0799c2c4"
                redirect_uri="https://app.pleo.io/login"
                ;;
        *)
                printf "illegal environment set: %s" "$environment"
                exit 1
                ;;
esac

# Get basic token

url="$base_url/oauth/login"
url+="?client_id=$(urlencode "$client_id")"
url+="&scope=$(urlencode "$scope")"
url+="&state=$(urlencode "$state")"
url+="&redirect_uri=$(urlencode "$redirect_uri")"
url+="&response_type=token"

data="email=$(urlencode "$email")"
data+="&password=$(urlencode "$password")"

response=$(curl -s -X POST "$url" -d "$data")

basic_access_token=$(echo "$response" | sed "s/^.*access_token=\([a-zA-Z0-9]*\).*$/\1/")

if [ "$two_factor" = false ]; then
        echo "$basic_access_token"
        exit
fi

# Get 2FA based token

echo "Please enter 2FA token: "
read -r token

url="$base_url/admin/login"
data="{\"token\": \"$token\", \"clientId\": \"$client_id\"}"

response=$(curl -s -X POST "$url" \
        -H "Content-Type: application/json; charset=UTF-8" \
        -H "Authorization: Bearer $basic_access_token" \
        -d "$data")

admin_access_token=$(echo "$response" | jq -r ".accessToken")

echo "$admin_access_token"
